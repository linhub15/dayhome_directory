/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DirectoryRouteRouteImport } from './routes/directory/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DirectoryIndexRouteImport } from './routes/directory/index'
import { Route as DirectoryIdIndexRouteImport } from './routes/directory/$id/index'
import { Route as DirectoryIdEditRouteImport } from './routes/directory/$id/edit'

const DirectoryRouteRoute = DirectoryRouteRouteImport.update({
  id: '/directory',
  path: '/directory',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DirectoryIndexRoute = DirectoryIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DirectoryRouteRoute,
} as any)
const DirectoryIdIndexRoute = DirectoryIdIndexRouteImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => DirectoryRouteRoute,
} as any)
const DirectoryIdEditRoute = DirectoryIdEditRouteImport.update({
  id: '/$id/edit',
  path: '/$id/edit',
  getParentRoute: () => DirectoryRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/directory': typeof DirectoryRouteRouteWithChildren
  '/directory/': typeof DirectoryIndexRoute
  '/directory/$id/edit': typeof DirectoryIdEditRoute
  '/directory/$id': typeof DirectoryIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/directory': typeof DirectoryIndexRoute
  '/directory/$id/edit': typeof DirectoryIdEditRoute
  '/directory/$id': typeof DirectoryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/directory': typeof DirectoryRouteRouteWithChildren
  '/directory/': typeof DirectoryIndexRoute
  '/directory/$id/edit': typeof DirectoryIdEditRoute
  '/directory/$id/': typeof DirectoryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/directory'
    | '/directory/'
    | '/directory/$id/edit'
    | '/directory/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/directory' | '/directory/$id/edit' | '/directory/$id'
  id:
    | '__root__'
    | '/'
    | '/directory'
    | '/directory/'
    | '/directory/$id/edit'
    | '/directory/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DirectoryRouteRoute: typeof DirectoryRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/directory': {
      id: '/directory'
      path: '/directory'
      fullPath: '/directory'
      preLoaderRoute: typeof DirectoryRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/directory/': {
      id: '/directory/'
      path: '/'
      fullPath: '/directory/'
      preLoaderRoute: typeof DirectoryIndexRouteImport
      parentRoute: typeof DirectoryRouteRoute
    }
    '/directory/$id/': {
      id: '/directory/$id/'
      path: '/$id'
      fullPath: '/directory/$id'
      preLoaderRoute: typeof DirectoryIdIndexRouteImport
      parentRoute: typeof DirectoryRouteRoute
    }
    '/directory/$id/edit': {
      id: '/directory/$id/edit'
      path: '/$id/edit'
      fullPath: '/directory/$id/edit'
      preLoaderRoute: typeof DirectoryIdEditRouteImport
      parentRoute: typeof DirectoryRouteRoute
    }
  }
}

interface DirectoryRouteRouteChildren {
  DirectoryIndexRoute: typeof DirectoryIndexRoute
  DirectoryIdEditRoute: typeof DirectoryIdEditRoute
  DirectoryIdIndexRoute: typeof DirectoryIdIndexRoute
}

const DirectoryRouteRouteChildren: DirectoryRouteRouteChildren = {
  DirectoryIndexRoute: DirectoryIndexRoute,
  DirectoryIdEditRoute: DirectoryIdEditRoute,
  DirectoryIdIndexRoute: DirectoryIdIndexRoute,
}

const DirectoryRouteRouteWithChildren = DirectoryRouteRoute._addFileChildren(
  DirectoryRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DirectoryRouteRoute: DirectoryRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
